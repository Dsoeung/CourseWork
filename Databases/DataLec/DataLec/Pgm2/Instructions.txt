






int insertBook(HashFile *pHashFile, Book *pBook) – you must modify this
This function inserts a book into the specified file.
•	Determine the RBN using the driver's hash function.
•	Use readRec to read a record at that RBN.  
•	If that location doesn't exist or the record at that location has a szBookId[0] == '\0':
o	Write the new  book record (using pBook) at that location using writeRec. (Note this is different if doing the extra credit.)
•	If that record exists and that book's szBookId matches pBook->szBookId, return RC_REC_EXISTS.  (Do not update it.)
•	Otherwise, it is a synonym to the book in the hashed location:
Pgm2:
o	Determine if it exists by probing. We use a probing K value of 1.  If it does already exist, return RC_REC_EXISTS.  (Do not update it.)
o	Limit the probing to pHashFile->hashHeader.iMaxProbes.  For example, if iMaxProbes is 3, you can look at the original hash location and at most two additional records.  We are only looking at adjacent records below it. 
o	if there isn't an empty slot and we have probed a total of iMaxProbes times (including looking at the hashed location), return RC_TOO_MANY_COLLISIONS. If it doesn't exist and there is an empty slot (maybe because we haven't yet written to that slot), write it to that empty slot.  
o	Also, we will not probe past the header record’s iMaxOvRBN.  This would also cause you to return RC_TOO_MANY_COLLISIONS.


int readBook(HashFile *pHashFile, Book *pBook, int *piRBN) – you must modify this
This function reads the specified book by its szBookId.
•	We are returning the RBN for where it was written and also handling synonyms.
•	Determine the primary RBN using the driver's hash function.
•	Use readRec to read the record at that RBN. 
•	If the book at that location matches the specified szBookId, return the book via pBook, set *piRBN, and return RC_OK.
•	Otherwise, it is a synonym to the book in the hashed location:
o	Determine if it exists as a synonym using probing with a K value of 1.
If it does exist, return the book via pBook, set *piRBN to its actual RBN (where it was found),
and return RC_OK.
o	If you read past the end of the file, return RC_REC_NOT_FOUND.
o	If you have read for the maximum probes and it wasn’t found, return RC_REC_NOT_FOUND.


int updateBook(HashFile *pHashFile, Book *pBook) – this is new
•	This function reads the specified book by its szBookId.  If found, it updates the contents of the book in the hash file.  If not found, it returns RC_REC_NOT_FOUND.  Note that this function must understand probing.


int deleteBook(HashFile *pHashFile, Book *pBook) – this is new
•	If you did not do the extra credit, create a simple function that just returns RC_NOT_IMPLEMENTED.
•	This function finds the specified book and deletes it by simply setting all bytes in that record to '\0'.  Once deleted, this may impact your readBook, insertBook, and updateBook since there can now be empty records along a synonym list even though the needed book could be after it.
